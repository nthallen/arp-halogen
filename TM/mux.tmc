TM 1 Hz AD12  MUX01;   Address MUX01 0xDC2;
TM 1 Hz AD12  MUX02;   Address MUX02 0xDC4;
TM 1 Hz AD12  MUX03;   Address MUX03 0xDC6;
TM 1 Hz AD12  MUX04;   Address MUX04 0xDC8;
TM 1 Hz AD12  MUX05;   Address MUX05 0xDCA;
TM 1 Hz AD12  MUX06;   Address MUX06 0xDCC;
TM 1 Hz AD12  MUX07;   Address MUX07 0xDCE;
TM 1 Hz UCHAR MUXAddr; Address MUXAddr 0x868;
TM 1 Hz UCHAR MUXStale;

TM "Receive" MUXCtrl 1;

Group MUX ( MUXAddr, MUX01, MUX02, MUX03, MUX04, MUX05, MUX06, MUX07) {
  MUXAddr = ((sbrba(MUXAddr.address) >> 2) & 0xF);
  MUX01 = (sbrwa(MUX01.address) & 0xFFF) << 4;
  MUX02 = (sbrwa(MUX02.address) & 0xFFF) << 4;
  MUX03 = (sbrwa(MUX03.address) & 0xFFF) << 4;
  MUX04 = (sbrwa(MUX04.address) & 0xFFF) << 4;
  MUX05 = (sbrwa(MUX05.address) & 0xFFF) << 4;
  MUX06 = (sbrwa(MUX06.address) & 0xFFF) << 4;
  MUX07 = (sbrwa(MUX07.address) & 0xFFF) << 4;
  MUXStale = MUXCtrl_obj->stale(255);
  MUXCtrl_obj->synch();
}

AD12         V11Pos;      invalidate V11Pos;
AD12         V12Pos;      invalidate V12Pos;
AD12_T30K    ADetT;       invalidate ADetT;
AD12_T30K    A_LMT;       invalidate A_LMT;
AD12         AceHP;       invalidate AceHP;
AD12         AceLP;       invalidate AceLP;
AD12_T30K    Air1T;       invalidate Air1T;
AD12_T30K    Air2T;       invalidate Air2T;
AD12_T30K    Air3T;       invalidate Air3T;
AD12_HP      AirHP;       invalidate AirHP;
AD12_LP      AirLP;       invalidate AirLP;
AD12_T30K    Air_T;       invalidate Air_T;
AD12_T30K    Aux_T;       invalidate Aux_T;
AD12_T30K    BDetT;       invalidate BDetT;
AD12_T30K    B_LMT;       invalidate B_LMT;
AD12_T30K    CDetT;       invalidate CDetT;
AD12_T30K    C_LMT;       invalidate C_LMT;
AD12_HP      N22HP;       invalidate N22HP;
AD12_LP      N22LP;       invalidate N22LP;
AD12_T30K    Cvr1T;       invalidate Cvr1T;
AD12_T30K    Cvr2T;       invalidate Cvr2T;
AD12_T30K    Cvr3T;       invalidate Cvr3T;
AD12_T30K    DDetT;       invalidate DDetT;
AD12_T30K    DHA1T;       invalidate DHA1T;
AD12_T30K    DHA2T;       invalidate DHA2T;
AD12_T30K    DLH1T;       invalidate DLH1T;
AD12_T30K    DLH2T;       invalidate DLH2T;
AD12_T30K    DResT;       invalidate DResT;
AD12_T30K    D_LMT;       invalidate D_LMT;
AD12_T30K    Dbl_T;       invalidate Dbl_T;
AD12_T30K    Exh1T;       invalidate Exh1T;
AD12_T30K    Exh2T;       invalidate Exh2T;
AD12_T30K    Exh3T;       invalidate Exh3T;
AD12_T30K    Exh4T;       invalidate Exh4T;
AD12_T30K    Gas1T;       invalidate Gas1T;
AD12_T30K    Gas2T;       invalidate Gas2T;
AD12_T30K    Gas3T;       invalidate Gas3T;
AD12_T30K    Gas4T;       invalidate Gas4T;
AD12_T30K    Gas5T;       invalidate Gas5T;
AD12_T30K    LXC1T;       invalidate LXC1T;
AD12_T30K    LXC2T;       invalidate LXC2T;
AD12_T30K    LXH1T;       invalidate LXH1T;
AD12_T30K    LXH2T;       invalidate LXH2T;
AD12         LabM1;       invalidate LabM1;
AD12         LabM2;       invalidate LabM2;
AD12         LabM3;       invalidate LabM3;
AD12_T30K    NO21P2T;      invalidate NO21P2T;
AD12_T30K    NO22P2T;      invalidate NO22P2T;
AD12_HP      N2_HP;       invalidate N2_HP;
AD12_LP      N2_LP;       invalidate N2_LP;
AD12_T30K    NO21PT;      invalidate NO21PT;
AD12_T30K    NO22PT;      invalidate NO22PT;
AD12_HP      NO_HP;       invalidate NO_HP;
AD12_LP      NO_LP;       invalidate NO_LP;
AD12_T30K    OP1CT;       invalidate OP1CT;
AD12_T30K    OP1WT;       invalidate OP1WT;
AD12_T30K    OP2CT;       invalidate OP2CT;
AD12_T30K    OP2WT;       invalidate OP2WT;
AD12_T30K    OP3CT;       invalidate OP3CT;
AD12_T30K    OP3WT;       invalidate OP3WT;
AD12_T30K    OP4CT;       invalidate OP4CT;
AD12_T30K    OP4WT;       invalidate OP4WT;
AD12_T30K    OP5CT;       invalidate OP5CT;
AD12_T30K    OP5WT;       invalidate OP5WT;
AD12         OxyHP;       invalidate OxyHP;
AD12         OxyLP;       invalidate OxyLP;
AD12_T30K    PC_1T;       invalidate PC_1T;
AD12_T30K    PC_2T;       invalidate PC_2T;
AD12_T30K    PLP1T;       invalidate PLP1T;
AD12_T30K    PLP2T;       invalidate PLP2T;
AD12_T30K    PS_1T;       invalidate PS_1T;
AD12_T30K    PS_2T;       invalidate PS_2T;
AD12_T30K    Rv10T;       invalidate Rv10T;
AD12_T30K    Rv11T;       invalidate Rv11T;
AD12_T30K    Rv12T;       invalidate Rv12T;
AD12_T30K    Rv13T;       invalidate Rv13T;
AD12_T30K    Rv14T;       invalidate Rv14T;
AD12_T30K    Rv15T;       invalidate Rv15T;
AD12_T30K    Rv16T;       invalidate Rv16T;
AD12_T30K    Rv_1T;       invalidate Rv_1T;
AD12_T30K    Rv_2T;       invalidate Rv_2T;
AD12_T30K    Rv_3T;       invalidate Rv_3T;
AD12_T30K    Rv_4T;       invalidate Rv_4T;
AD12_T30K    Rv_5T;       invalidate Rv_5T;
AD12_T30K    Rv_6T;       invalidate Rv_6T;
AD12_T30K    Rv_7T;       invalidate Rv_7T;
AD12_T30K    Rv_8T;       invalidate Rv_8T;
AD12_T30K    Rv_9T;       invalidate Rv_9T;
AD12_T30K    SDP1T;       invalidate SDP1T;
AD12_T30K    SDP2T;       invalidate SDP2T;
AD12         SPR_MUX1_15; invalidate SPR_MUX1_15;
AD12         SPR_MUX1_16; invalidate SPR_MUX1_16;
AD12_T30K    TRU1T;       invalidate TRU1T;
AD12_T30K    TRU2T;       invalidate TRU2T;
AD12_T30K    TRU3T;       invalidate TRU3T;
AD12_T30K    TRUET;       invalidate TRUET;
AD12_T30K    VicrT;       invalidate VicrT;
AD12_T30K    X1FAT;       invalidate X1FAT;
AD12_T30K    X1HVT;       invalidate X1HVT;
AD12_T30K    X1PAT;       invalidate X1PAT;
AD12_T30K    X1_1T;       invalidate X1_1T;
AD12_T30K    X1_2T;       invalidate X1_2T;
AD12_T30K    X1_3T;       invalidate X1_3T;
AD12_T30K    X1_4T;       invalidate X1_4T;
AD12_T30K    X2FAT;       invalidate X2FAT;
AD12_T30K    PmotT;       invalidate PmotT;
AD12_T30K    X2PAT;       invalidate X2PAT;
AD12_T30K    X2_1T;       invalidate X2_1T;
AD12_T30K    X2_2T;       invalidate X2_2T;
AD12_T30K    X2_3T;       invalidate X2_3T;
AD12_T30K    X2_4T;       invalidate X2_4T;
AD12_T30K    Yag_T;       invalidate Yag_T;

switch ( MUXAddr ) {
  case 0:
    NO_LP = MUX01; validate NO_LP;
    Rv13T = MUX02; validate Rv13T;
    Air1T = MUX03; validate Air1T;
    X1FAT = MUX04; validate X1FAT;
    BDetT = MUX05; validate BDetT;
    OP2WT = MUX06; validate OP2WT;
    LXH2T = MUX07; validate LXH2T;
    break;
  case 1:
    N2_LP = MUX01; validate N2_LP; /* was NO2LP */
    Rv14T = MUX02; validate Rv14T;
    Air_T = MUX03; validate Air_T;
    X1PAT = MUX04; validate X1PAT;
    B_LMT = MUX05; validate B_LMT;
    OP3WT = MUX06; validate OP3WT;
    PLP1T = MUX07; validate PLP1T;
    break;
  case 2:
    N22LP = MUX01; validate N22LP; /* was ClNLP */
    Rv15T = MUX02; validate Rv15T;
    DResT = MUX03; validate DResT;
    X2FAT = MUX04; validate X2FAT;
    SDP1T = MUX05; validate SDP1T;
    OP4WT = MUX06; validate OP4WT;
    PLP2T = MUX07; validate PLP2T;
    break;
  case 3:
    AceLP = MUX01; validate AceLP;
    Rv16T = MUX02; validate Rv16T;
    Air2T = MUX03; validate Air2T;
    X2PAT = MUX04; validate X2PAT;
    DHA1T = MUX05; validate DHA1T;
    OP5WT = MUX06; validate OP5WT;
    PS_1T = MUX07; validate PS_1T;
    break;
  case 4:
    AirLP = MUX01; validate AirLP;
    CDetT = MUX02; validate CDetT;
    Air3T = MUX03; validate Air3T;
    NO21PT = MUX04; validate NO21PT; /* formerly NO2P1T */
    Rv_1T = MUX05; validate Rv_1T;
    X2_1T = MUX06; validate X2_1T;
    PC_1T = MUX07; validate PC_1T;
    break;
  case 5:
    OxyLP = MUX01; validate OxyLP;
    C_LMT = MUX02; validate C_LMT;
    Gas1T = MUX03; validate Gas1T;
    NO22PT = MUX04; validate NO22PT; /* formerly NO2P2T */
    Rv_2T = MUX05; validate Rv_2T;
    X2_2T = MUX06; validate X2_2T;
    PC_2T = MUX07; validate PC_2T;
    break;
  case 6:
    LabM1 = MUX01; validate LabM1;
    DDetT = MUX02; validate DDetT;
    Gas2T = MUX03; validate Gas2T;
    LabM3 = MUX04; validate LabM3;
    Rv_3T = MUX05; validate Rv_3T;
    X2_3T = MUX06; validate X2_3T;
    VicrT = MUX07; validate VicrT;
    break;
  case 7:
    LabM2 = MUX01; validate LabM2;
    D_LMT = MUX02; validate D_LMT;
    Gas3T = MUX03; validate Gas3T;
    PS_2T = MUX04; validate PS_2T;
    Rv_4T = MUX05; validate Rv_4T;
    X1_3T = MUX06; validate X1_3T;
    X1_1T = MUX07; validate X1_1T;
    break;
  case 8:
    OxyHP = MUX01; validate OxyHP;
    Rv12T = MUX02; validate Rv12T;
    PmotT = MUX03; validate PmotT; /* was X2HVT */
    Exh4T = MUX04; validate Exh4T;
    A_LMT = MUX05; validate A_LMT;
    OP1WT = MUX06; validate OP1WT;
    LXH1T = MUX07; validate LXH1T;
    break;
  case 9:
    N22HP = MUX01; validate N22HP; /* was ClNHP */
    Rv11T = MUX02; validate Rv11T;
    DLH2T = MUX03; validate DLH2T;
    Exh3T = MUX04; validate Exh3T;
    ADetT = MUX05; validate ADetT;
    NO22P2T = MUX06; validate NO22P2T; /* formerly NO2F2T */
    Aux_T = MUX07; validate Aux_T;
    break;
  case 10:
    AceHP = MUX01; validate AceHP;
    Rv10T = MUX02; validate Rv10T;
    DLH1T = MUX03; validate DLH1T;
    Exh2T = MUX04; validate Exh2T;
    OP5CT = MUX05; validate OP5CT;
    NO21P2T = MUX06; validate NO21P2T; /* formerly NO2F1T */
    LXC2T = MUX07; validate LXC2T;
    break;
  case 11:
    NO_HP = MUX01; validate NO_HP;
    Rv_9T = MUX02; validate Rv_9T;
    X1HVT = MUX03; validate X1HVT;
    Exh1T = MUX04; validate Exh1T;
    OP3CT = MUX05; validate OP3CT;
    OP4CT = MUX06; validate OP4CT;
    LXC1T = MUX07; validate LXC1T;
    break;
  case 12:
    N2_HP = MUX01; validate N2_HP; /* was NO2HP */
    DHA2T = MUX02; validate DHA2T;
    Dbl_T = MUX03; validate Dbl_T;
    Rv_8T = MUX04; validate Rv_8T;
    OP2CT = MUX05; validate OP2CT;
    Cvr3T = MUX06; validate Cvr3T;
    TRU3T = MUX07; validate TRU3T;
    break;
  case 13:
    AirHP = MUX01; validate AirHP;
    SDP2T = MUX02; validate SDP2T;
    Yag_T = MUX03; validate Yag_T;
    Rv_7T = MUX04; validate Rv_7T;
    OP1CT = MUX05; validate OP1CT;
    Cvr2T = MUX06; validate Cvr2T;
    TRU2T = MUX07; validate TRU2T;
    break;
  case 14:
    SPR_MUX1_15 = MUX01; validate SPR_MUX1_15;
    Gas5T = MUX02; validate Gas5T;
    V11Pos = MUX03; validate V11Pos;
    Rv_6T = MUX04; validate Rv_6T;
    X2_4T = MUX05; validate X2_4T;
    Cvr1T = MUX06; validate Cvr1T;
    TRU1T = MUX07; validate TRU1T;
    break;
  case 15:
    SPR_MUX1_16 = MUX01; validate SPR_MUX1_16;
    Gas4T = MUX02; validate Gas4T;
    V12Pos = MUX03; validate V12Pos;
    Rv_5T = MUX04; validate Rv_5T;
    X1_4T = MUX05; validate X1_4T;
    X1_2T = MUX06; validate X1_2T;
    TRUET = MUX07; validate TRUET;
    break;
}
