#----------------------------------------------------------------
# Algorithm Architecture:
# Partition 1: Outlines main flow of algorithm
#  INITIALIZE: Basic turn-on stuff
#  ASCENT: After take-off
#  RECORD_INIT: Record like but done only once
#  RECORD: Main Data-taking mode
#  RECORD_NO2_ONLY: The record state if no air (<100 psi)
#  DESCENT: On the way down, with possible restart
#  SHUTDOWN: On or near the ground. Definitely quitting.
#
# Partition 2: Pressure/Software Switch
#  ON_GROUND: High pressure, either turning on or shutting down
#  BELOW_CLOUDS: Intermediate altitude
#  ABOVE_CLOUDS: High altitude, main data taking
#
#----------------------------------------------------------------
# See also: Halog.tma
#############################################################################
#############################################################################
#	This partition controls the execution of the experiment.  It is keyed
#	off of the altitude states (ON_GROUND, BELOW_CLOUDS, ABOVE_CLOUDS).
#############################################################################
#############################################################################

# SW STATUS RULES:

# SW Status 1: Used only to take action, Action on transitions, not
#		requiring the bit be held at any value
#	SW# TMA FILE	USE
#	1-4 ClNf		alt control
#	211-214 Halog	off lamps (A-D)
# 221-224 Halog	on lamps (A-D)
#	244             Time-Warp
#	255             QUICK_SHUTDOWN

# SW Status 2: Used only to mark data
#	SW #	TMA FILE	USE
#	10-19   ClNf	velocity markers
#	20-29 	ClNf	temp scan duct 1
#	30-39 	ClNf	dither duct 1
#	50-59 	ClNf	temp scan duct 2
#	60-69 	ClNf	dither duct 2
#
#	11  	ClN		GasCheck
#	21  	ClN		DSDM
#	31  	ClN		NO_Scan
#	41  	ClN		ClONO2_SCAN
#	51  	ClN		Ramp_T1_Up
#	61  	ClN		Ramp_T1_Down
#	71  	ClN		Valve_test
#----------------------------------------------------------------
# Halogen Soldrv Modes
# 0 Immediate shutdown to default condition
# 1 Orderly shutdown: NO Off
# 2 NO Addition (both ducts)
###################################################################

###################################################################
#  Initialize 																
###################################################################
%{
  #include "msg.h"
%}


{ tma_hold( (IOSwS & 3) == 1 ); }
{ depending on (QUICK_SHUTDOWN) {
  } else {
    if ( (IOSwS & 3) == 0 || SW1_S == SWS_SHUTDOWN )
      Validate QUICK_SHUTDOWN;
  }
}

State INITIALIZE {
      > telemetry start
  +1  > fail lamp 0 off

  depending on (BELOW_CLOUDS) { Validate ASCENT; }
  depending on (ABOVE_CLOUDS) { Validate ASCENT; }
}

###################################################################
#	Aircraft is Ascending - Prepare to Take Data
###################################################################

State ASCENT {

  ##### Initialize Secondary Throttle #####
   +1 > Drive Secondary Throttle 2 out 5000
   +1 Hold until (!(SV2St&8)) or 2;
      > Drive Secondary Throttle 2 in 65535
   +1 Hold until (!(SV2St&8)) or 8;
      > Drive Secondary Throttle 2 out 0
  # aiming for 15 m/s, step 10000/8500 duct 1/2, for the rest of this state
  # guessing that new obstructions in duct 1 require slightly more open
  # valve
   +1 > Drive Secondary Throttle 2 to 8500
   +1 > Soldrv NO Addition

  { if  ( convert(N2_HP) < 100 ) Validate RECORD_NO2_ONLY; }
  depending on (ABOVE_CLOUDS) { Validate RECORD_INIT; }
  depending on (ON_GROUND) { Validate SHUTDOWN; }
}

###################################################################
#	Aircraft is Above the Clouds - Take Data
###################################################################
%{
  int Done_Record_Once = 0;
%}

State RECORD_INIT {
  depending on (BELOW_CLOUDS) { Validate DESCENT; }
  depending on (ON_GROUND) { Validate DESCENT; }
  ### check for N2_HP; if below threshold, Validate Record_NO2_ONLY ###
  { if ( convert(N2_HP) < 100 ) Validate RECORD_NO2_ONLY; }


  Validate RECORD;
}

State Record {
  depending on (BELOW_CLOUDS) { Validate DESCENT; }
  depending on (ON_GROUND) { Validate DESCENT; }

  ### check for N2_HP; if below threshold, Validate Record_NO2_ONLY ###
  { if ( convert(N2_HP) < 100 ) Validate RECORD_NO2_ONLY; }

  # We start at 8500 as set in ASCENT

  Hold until (SW1_S == SWS_TIME_WARP) or 5:00;
  > SW Status Set 1 to 0
  Hold until (HSolS == 20) or 35;
  > Drive Secondary Throttle 2 out 4000
  Hold until (SW1_S == SWS_TIME_WARP) or 5:00;
  > SW Status Set 1 to 0
  Hold until (HSolS == 20) or 35;
  > Drive Secondary Throttle 2 in 4000
  Validate Record;
}

State RECORD_NO2_ONLY {
  depending on (BELOW_CLOUDS) { Validate DESCENT; }
  depending on (ON_GROUND) { Validate DESCENT; }

  +1 > Soldrv NO Off
}

###################################################################
#	Aircraft is Descending Below the Clouds
###################################################################

State DESCENT {
  +1  > soldrv NO off
      "Holding for Soldrv Cycle Start";
      hold until (HSolS == 0) or 35;

      > Drive Secondary Throttle 2 In 65535
      depending on (ON_GROUND) { Validate SHUTDOWN; }
      # depending on (ABOVE_CLOUDS) { Validate RECORD_INIT; }
      depending on (ABOVE_CLOUDS) { Validate ASCENT; }
}

###################################################################
#	Shutdown
###################################################################

State SHUTDOWN {
  +60 > Fail Lamp 0 On
      > Quit
}

State QUICK_SHUTDOWN {
  # Halogen Lamps key off QUICK_SHUTDOWN
   +1 > Soldrv Select Halogen Mode 0
   +1 > Drive Secondary Throttle 2 in 65000
      Hold until valid (A_DEAD, B_DEAD, C_DEAD, D_DEAD) OR 10;
      > Fail Lamp 0 On
      > Quit
}
	
#############################################################################
#############################################################################
#	This partition converts pressure (altitude) into states (ON_GROUND,
#	BELOW_CLOUDS, ABOVE_CLOUDS). The threshold pressures each have two
#	values - one for the flight up and the other for the flight down.
#	This provides hysteresis and prevents bouncing.
#############################################################################
#############################################################################

PARTITION

%{ /* Altitude definitions */
  double P_ground_up = 500.;
  double P_ground_dn = 550.;
  double P_clouds_up = 280.;
  double P_clouds_dn = 370.;
  int using_swp = 0;
%}

# note on 960718 it was 10 min to below the clouds
# and +7 min to above the clouds

State ON_GROUND {
  { using_swp = 0; }

  > SW Status Set 1 to 0

  { if ( SW1_S == SWS_TAKEOFF ) {
    using_swp = 1;
    Validate BELOW_CLOUDS;
  } else if (convert(SD2_P) < P_ground_up)
    Validate BELOW_CLOUDS;
  }
}

State BELOW_CLOUDS {
    > SW Status Set 1 to 0

  { if ((using_swp && SW1_S == SWS_CLIMB) ||
        (!using_swp && convert(SD2_P) < P_clouds_up))
      Validate ABOVE_CLOUDS;
    else if ((using_swp && SW1_S == SWS_LAND) ||
            (!using_swp && convert(SD2_P) > P_ground_dn))
      Validate ON_GROUND;
  }
}

State ABOVE_CLOUDS {
  >   SW Status Set 1 to 0

  { if ( (using_swp && SW1_S == SWS_DESCEND) ||
	(!using_swp && convert(SD2_P) > P_clouds_dn))
      Validate BELOW_CLOUDS;
  }
}

#############################################################################
#############################################################################
## Partition for Pump Control
#############################################################################
#############################################################################

PARTITION

State Pump_Init {
    depending on (BELOW_CLOUDS) { Validate Pump_On; }
    depending on (ABOVE_CLOUDS) { Validate Pump_On; }
    depending on (SHUTDOWN) { Validate Pump_Off; }
    depending on (QUICK_SHUTDOWN) { Validate Pump_Off; }

 +3 > Pump Off

    Hold until (convert(PmotT) < 10.);
    Hold until (convert(PmotT) > 12.) OR 3:00
    else Validate Pump_On_Low_Temp;
    Validate Pump_Init; # Loop
}

State Pump_On_Low_Temp {
    depending on (BELOW_CLOUDS) { Validate Pump_On; }
    depending on (ABOVE_CLOUDS) { Validate Pump_On; }
    depending on (SHUTDOWN) { Validate Pump_Off; }
    depending on (QUICK_SHUTDOWN) { Validate Pump_Off; }
    > Pump On
    { if (convert(PmotT) > 65.) {
        msg(2, "Pump Over Temperature: Motor: %.1lf",
          convert(PmotT) );
        Validate Pump_Over_Temp;
      }
    }
}

State Pump_On {
    depending on (SHUTDOWN) { Validate Pump_Off; }
    depending on (QUICK_SHUTDOWN) { Validate Pump_Off; }
    > Pump On
    { if (convert(PmotT) > 65.) {
        msg(2, "Pump Over Temperature: Motor: %.1lf",
          convert(PmotT) );
        Validate Pump_Over_Temp;
      }
    }
}
    
State Pump_Over_Temp {
    depending on (SHUTDOWN) { Validate Pump_Off; }
    depending on (QUICK_SHUTDOWN) { Validate Pump_Off; }
    > Pump Off
    Hold until (convert(PmotT) < 35.);
    Validate Pump_On;
}

State Pump_Off {
    > Pump Off
}
