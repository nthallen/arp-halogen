#############################################################################
#############################################################################
#	The following four partitions watch the four lamps.  A lamp is lit 
#	depending on (BELOW_CLOUDS, ABOVE_CLOUDS).  A lamp is turned off
#	and relit if the IR monitor indicates a lamp failure
#	(IR<ir0). A lamp is permanently turned off if either:
# 		1.	The lamp will not light after 6 attempts
#		2.	depending on (SHUTDOWN)
#----------------------------------------------------------------
#   Set lamp dependent RF and IR setpoints here
#   Data used: A 961208  B 961208  C 961207  D 961207   
#                                    970111    970111
#                9704xx    9704xx    9704xx    9704xx
#----------------------------------------------------------------
# Notes:
#  Turn lamp off before checking fail count, else RF will be
#  left on for 3 minutes before being turned off in *_DEAD state.
#  Separated *_START state from *_ON so failure checks could
#  be activated before 3 minute delay.
#  Separated *_OFF from *_DEAD so SHUTDOWN can depend on *_DEAD
#############################################################################
############################################################################# 

#	Define global lamp failure threshold
%{
  #include "nortlib.h"

  double ir0=0.15;
  int SW_stop = 0;
  #define A_STOPPED 1
  #define B_STOPPED 2
  #define C_STOPPED 4
  #define D_STOPPED 8
  check_lamp_sws( int SWS, int val, int bit, int set ) {
    int rv = 0;
    if ( SWS == val ) {
      if ( set ) {
	if ( ( SW_stop & bit ) == 0 ) {
	  SW_stop |= bit;
	  rv = 1;
	}
      } else {
	if ( ( SW_stop & bit ) != 0 ) {
	  SW_stop &= ~bit;
	  rv = 1;
	}
      }
    }
    if ( rv ) ci_sendcmd( "Set SW Status 1 to 0\n", 0 );
    return rv;
  }
%}

{ if ( check_lamp_sws( SW1_S, 211, A_STOPPED, 1 )) validate A_OFF; }
{ if ( check_lamp_sws( SW1_S, 212, B_STOPPED, 1 )) validate B_OFF; }
{ if ( check_lamp_sws( SW1_S, 213, C_STOPPED, 1 )) validate C_OFF; }
{ if ( check_lamp_sws( SW1_S, 214, D_STOPPED, 1 )) validate D_OFF; }
{ if ( check_lamp_sws( SW1_S, 221, A_STOPPED, 0 )) validate A_WAIT; }
{ if ( check_lamp_sws( SW1_S, 222, B_STOPPED, 0 )) validate B_WAIT; }
{ if ( check_lamp_sws( SW1_S, 223, C_STOPPED, 0 )) validate C_WAIT; }
{ if ( check_lamp_sws( SW1_S, 224, D_STOPPED, 0 )) validate D_WAIT; }
depending on (QUICK_SHUTDOWN) {
  if ( SW_stop != (A_STOPPED|B_STOPPED|C_STOPPED|D_STOPPED) ) {
	SW_stop = (A_STOPPED|B_STOPPED|C_STOPPED|D_STOPPED);
	validate A_OFF;
	validate B_OFF;
	validate C_OFF;
	validate D_OFF;
  }
}

#############################################################################
#############################################################################
# Partition 9: Lamp A Control (Assuming ClNf.tma and no2.tma)
#############################################################################
#############################################################################

PARTITION

%{	
	int		fail_cnt_a=0, warn_a = 0;
%}

State A_WAIT {
	+1		>	Lamp A off

	depending on (BELOW_CLOUDS) { validate A_START; }
	depending on (ABOVE_CLOUDS) { validate A_START; }
}

State A_START {
	+1	>	Lamp A IR Setpoint 0
	+1	> 	Lamp A off
 +1:00	{ 	if (++fail_cnt_a>6) {
				msg(2, "Lamp A Failed 6 times" );
				validate A_DEAD;
			}
		}
	+1	>	Lamp A RF Setpoint 3000	
 	+5	> 	Lamp A on
   +10      hold until (convert(A_IRV) >= ir0)
			or 20 else validate A_START;
	+1	{	fail_cnt_a = 0; }
	+1	>	Lamp A IR Setpoint 1025
	        Validate A_ON;
}

State A_ON {
	{ if (convert(A_IRV) < ir0) validate A_START; }

	depending on (DESCENT) { validate A_OFF; }

	        "Lamp A is On: waiting to assess health";
			{ warn_a = 7; }
	+3:00   "Lamp A is On";
			{ if ((warn_a&1) && convert(ARFFW) < 1.0) {
				msg(1, "Lamp A forward power is low"); 
				warn_a &= ~1;
			  }
			  if ((warn_a&2) && convert(ARFBW) > 4.0) {
			    msg(1, "Lamp A reflected power is high");
				warn_a &= ~2;
			  }
			  if ((warn_a&4) && convert(A_IRV) < 0.4) {
				msg(1, "Lamp A IR is low");
				warn_a &= ~4;
			  }
			}
}

State A_OFF {
		depending on (ABOVE_CLOUDS) {
		  if ( ! (SW_stop & A_STOPPED) )
			validate A_START;
		}

		"Holding for cycle start";
		hold until ((HSolS % 10) == 0) or 35;
	+1	>	set sw status 1 to 0
		>	Lamp A IR Setpoint 0
		"Lamp A Heater Off, cooling down";
 +3:00	>	Lamp A off
		>	Lamp A RF Setpoint 0	
 		"Lamp A is Off";
}

State A_DEAD {
	+1	>	Lamp A IR Setpoint 0
	+1	>	Lamp A RF Setpoint 0	
	+1	>  	Lamp A Off
    	"Lamp A is Dead"; 
}

#############################################################################
#############################################################################
# Partition 10: Lamp B Control (Assuming ClNf.tma and no2.tma)
#############################################################################
#############################################################################

PARTITION

%{	
	int		fail_cnt_b=0, warn_b = 0;
%}

State B_WAIT {
	+1		>	Lamp B off

	depending on (BELOW_CLOUDS) { validate B_START; }
	depending on (ABOVE_CLOUDS) { validate B_START; }
}

State B_START {
	+1	>	Lamp B IR Setpoint 0
	+1	> 	Lamp B off
 +1:00	{ 	if (++fail_cnt_b>6) {
				msg(2, "Lamp B Failed 6 times" );
				validate B_DEAD;
			}
		}
	+1	>	Lamp B RF Setpoint 3000	
   +10	> 	Lamp B on
   +10      hold until (convert(B_IRV) >= ir0)
			or 20 else validate B_START;
	+1	{	fail_cnt_b = 0; }
	+1	>	Lamp B IR Setpoint 1025
	        Validate B_ON;
}

State B_ON {
	{	if (convert(B_IRV) < ir0) validate B_START; }
	depending on (DESCENT) { validate B_OFF; }

	        "Lamp B is On: waiting to assess health";
			{ warn_b = 7; }
	+3:00   "Lamp B is On";
			{ if ((warn_b&1) && convert(BRFFW) < 1.0) {
				msg(1, "Lamp B forward power is low"); 
				warn_b &= ~1;
			  }
			  if ((warn_b&2) && convert(BRFBW) > 4.0) {
			    msg(1, "Lamp B reflected power is high");
				warn_b &= ~2;
			  }
			  if ((warn_b&4) && convert(B_IRV) < 0.4) {
				msg(1, "Lamp B IR is low");
				warn_b &= ~4;
			  }
			}
}

State B_OFF {
		depending on (ABOVE_CLOUDS) {
		  if ( ! (SW_stop & B_STOPPED) )
			validate B_START;
		}

		"Holding for cycle start";
		hold until ((HSolS % 10) == 0) or 35;
	+1	>	set sw status 1 to 0
		>	Lamp B IR Setpoint 0
		"Lamp B Heater Off, cooling down";
 +3:00	>	Lamp B off
		>	Lamp B RF Setpoint 0	
 		"Lamp B is Off";
}

State B_DEAD {
	+1	>	Lamp B IR Setpoint 0
	+1	>	Lamp B RF Setpoint 0	
	+1	>  	Lamp B Off
    	"Lamp B is Dead"; 
}

#############################################################################
#############################################################################
# Partition 11: Lamp C Control (Assuming ClNf.tma and no2.tma)
#############################################################################
#############################################################################

PARTITION

%{	
	int		fail_cnt_c=0, warn_c = 0;
%}

State C_WAIT {
	+1		>	Lamp C off

	depending on (BELOW_CLOUDS) { validate C_START; }
	depending on (ABOVE_CLOUDS) { validate C_START; }
}

State C_START {
	+1	>	Lamp C IR Setpoint 0
	+1	> 	Lamp C off
 +1:00	{	if (++fail_cnt_c>6) {
				msg(2, "Lamp C Failed 6 times" );
				validate C_DEAD;
			}
		}
	+1	>	Lamp C RF Setpoint 3000	
   +15	> 	Lamp C on
   +10		hold until (convert(C_IRV) >= 0.015)
#   +10		hold until (convert(C_IRV) >= ir0)
			or 20 else validate C_START;
   +10	{	fail_cnt_c = 0; }
#		{ if ( convert( C_IRV) < 1 ) Validate C_ON; }
	+1	>	Lamp C IR Setpoint 225
	        Validate C_ON;
}

State C_ON {
	{	if (convert(C_IRV) < 0.015) validate C_START; }
	depending on (DESCENT) { validate C_OFF; }

	        "Lamp C is On: waiting to assess health";
			{ warn_c = 7; }
	+3:00   "Lamp C is On";
			{ if ((warn_c&1) && convert(CRFFW) < 1.0) {
				msg(1, "Lamp C forward power is low"); 
				warn_c &= ~1;
			  }
			  if ((warn_c&2) && convert(CRFBW) > 4.0) {
			    msg(1, "Lamp C reflected power is high");
				warn_c &= ~2;
			  }
			  if ((warn_c&4) && convert(C_IRV) < 0.04) {
				msg(1, "Lamp C IR is low");
				warn_c &= ~4;
			  }
			}
}

State C_OFF {
		depending on (ABOVE_CLOUDS) {
		  if ( ! (SW_stop & C_STOPPED) )
			validate C_START;
		}

		"Holding for cycle start";
		hold until ((HSolS % 10) == 0) or 35;
	+1	>	set sw status 1 to 0
		>	Lamp C IR Setpoint 0
		"Lamp C Heater Off, cooling down";
 +3:00	>	Lamp C off
		>	Lamp C RF Setpoint 0	
 		"Lamp C is Off";
}

State C_DEAD {
	+1	>	Lamp C IR Setpoint 0
	+1	>	Lamp C RF Setpoint 0	
	+1	>  	Lamp C Off
    	"Lamp C is Dead"; 
}

#############################################################################
#############################################################################
# Partition 12: Lamp D Control (Assuming ClNf.tma and no2.tma)
#############################################################################
#############################################################################

PARTITION

%{	
	int		fail_cnt_d=0, warn_d = 0;
%}

State D_WAIT {
	+1		>	Lamp D off

	depending on (BELOW_CLOUDS) { validate D_START; }
	depending on (ABOVE_CLOUDS) { validate D_START; }
}

State D_START {
	+1	>	Lamp D IR Setpoint 0
	+1	> 	Lamp D off
 +1:00	{ 	if (++fail_cnt_d>6) {
				msg(2, "Lamp D Failed 6 times" );
				validate D_DEAD;
			 }
		}
	+1	>	Lamp D RF Setpoint 3000	
   +20	> 	Lamp D on
   +10		hold until (convert(D_IRV) >= ir0)
			or 20 else validate D_START;
	+1	{ fail_cnt_d = 0; }
	+1	>	Lamp D IR Setpoint 1025
	        Validate D_ON;
}

State D_ON {
	{	if (convert(D_IRV) < ir0) validate D_START; }
	depending on (DESCENT) { validate D_OFF; }

	        "Lamp D is On: waiting to assess health";
			{ warn_d = 7; }
	+3:00   "Lamp D is On";
			{ if ((warn_d&1) && convert(DRFFW) < 1.0) {
				msg(1, "Lamp D forward power is low"); 
				warn_d &= ~1;
			  }
			  if ((warn_d&2) && convert(DRFBW) > 4.0) {
			    msg(1, "Lamp D reflected power is high");
				warn_d &= ~2;
			  }
			  if ((warn_d&4) && convert(D_IRV) < 0.4) {
				msg(1, "Lamp D IR is low");
				warn_d &= ~4;
			  }
			}
}

State D_OFF {
		depending on (ABOVE_CLOUDS) {
		  if ( ! (SW_stop & D_STOPPED) )
			validate D_START;
		}

		"Holding for cycle start";
		hold until ((HSolS % 10) == 0) or 35;
	+1	>	set sw status 1 to 0
		>	Lamp D IR Setpoint 0
		"Lamp D Heater Off, cooling down";
 +3:00	>	Lamp D off
		>	Lamp D RF Setpoint 0	
 		"Lamp D is Off";
}

State D_DEAD {
	+1	>	Lamp D IR Setpoint 0
	+1	>	Lamp D RF Setpoint 0	
	+1	>  	Lamp D Off
    	"Lamp D is Dead"; 
}
