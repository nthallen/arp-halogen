#############################################################################
#############################################################################
#	The following four partitions watch the four lamps.  A lamp is lit 
#	depending on (BELOW_CLOUDS, ABOVE_CLOUDS).  A lamp is turned off
#	and relit if the IR monitor indicates a lamp failure
#	(IR<ir0). A lamp is permanently turned off if either:
# 		1.	The lamp will not light after 6 attempts
#		2.	depending on (SHUTDOWN)
#----------------------------------------------------------------
# Lamps currently installed
#   May 29, 2021, AFRC Palmdale
#     A: 110420 ir0: 0.01 irset: 90
#     B: 032221 ir0: 0.10 irset: 200
#     C: 020420 ir0: 0.10 irset: 240
#     D: 101819 ir0: 0.10 irset: 260
#----------------------------------------------------------------
# Notes:
#  Turn lamp off before checking fail count, else RF will be
#  left on for 3 minutes before being turned off in *_DEAD state.
#  Separated *_START state from *_ON so failure checks could
#  be activated before 3 minute delay.
#  Separated *_OFF from *_DEAD so SHUTDOWN can depend on *_DEAD
#############################################################################
############################################################################# 

#	Define global lamp failure threshold
%{
  #include "nortlib.h"

  double ir0a = 0.01;
  double ir0b = 0.10;
  double ir0c = 0.10;
  double ir0d = 0.10;
  int SW_stop = 0;
  #define A_STOPPED 1
  #define B_STOPPED 2
  #define C_STOPPED 4
  #define D_STOPPED 8
  static int check_lamp_sws( int SWS, int val, int bit, int set ) {
    int rv = 0;
    if ( SWS == val ) {
      if ( set ) {
        if ( ( SW_stop & bit ) == 0 ) {
          SW_stop |= bit;
          rv = 1;
        }
      } else {
        if ( ( SW_stop & bit ) != 0 ) {
          SW_stop &= ~bit;
          rv = 1;
        }
      }
    }
    if ( rv ) ci_sendcmd( "SW Status Set 1 to 0\n", 0 );
    return rv;
  }
%}

{ if ( check_lamp_sws( SW1_S, SWS_LAMP_A_OFF, A_STOPPED, 1 )) Validate A_OFF; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_B_OFF, B_STOPPED, 1 )) Validate B_OFF; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_C_OFF, C_STOPPED, 1 )) Validate C_OFF; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_D_OFF, D_STOPPED, 1 )) Validate D_OFF; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_A_ON, A_STOPPED, 0 )) Validate A_WAIT; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_B_ON, B_STOPPED, 0 )) Validate B_WAIT; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_C_ON, C_STOPPED, 0 )) Validate C_WAIT; }
{ if ( check_lamp_sws( SW1_S, SWS_LAMP_D_ON, D_STOPPED, 0 )) Validate D_WAIT; }

depending on (QUICK_SHUTDOWN) {
  if ( SW_stop != (A_STOPPED|B_STOPPED|C_STOPPED|D_STOPPED) ) {
    SW_stop = (A_STOPPED|B_STOPPED|C_STOPPED|D_STOPPED);
    Validate A_DEAD;
    Validate B_DEAD;
    Validate C_DEAD;
    Validate D_DEAD;
  }
}

#############################################################################
#############################################################################
# Partition 3: Lamp A Control
#############################################################################
#############################################################################

PARTITION

%{
  int fail_cnt_a = 0, warn_a = 0;
%}

State A_WAIT {
   +1 > Lamp A off

  depending on (BELOW_CLOUDS) { Validate A_START; }
  depending on (ABOVE_CLOUDS) { Validate A_START; }
  depending on (SHUTDOWN) { Validate A_DEAD; }
}

State A_START {
    depending on (DESCENT) { Validate A_OFF; }
    depending on (SHUTDOWN) { Validate A_DEAD; }

     +1 > Lamp A IR Setpoint 0
     +1 > Lamp A off
  +1:00 { if (++fail_cnt_a>6) {
            msg(2, "Lamp A Failed 6 times" );
            Validate A_DEAD;
          }
        }
     +1 > Lamp A RF Setpoint 3000
     +5 > Lamp A on
    +10 Hold until (convert(A_IRV) >= ir0a)
          or 20 else Validate A_START;
     +1 { fail_cnt_a = 0; }
     +1 > Lamp A IR Setpoint 90
        Validate A_ON;
}

State A_ON {
    { if (!Lmp_A) Validate A_TRIPPED; }
    depending on (DESCENT) { Validate A_OFF; }
    depending on (SHUTDOWN) { Validate A_DEAD; }
    depending on (QUICK_SHUTDOWN) { Validate A_DEAD; }
    
    Hold until (convert(A_IRV) < ir0a);
    Hold until (convert(A_IRV) >= ir0a) OR 20
    else Validate A_START;
    Validate A_ON;
}

State A_TRIPPED {
 +10 > Lamp A On
  +1 Validate A_ON;
}

State A_OFF {
    depending on (ASCENT)
      { if ( ! (SW_stop & A_STOPPED) ) Validate A_START; }
    depending on (SHUTDOWN) { Validate A_DEAD; }

      "Holding for cycle start";
      hold until ((HSolS % 10) == 0) or 35;
   +1 > SW Status Set 1 to 0
      > Lamp A IR Setpoint 0
      "Lamp A Heater Off, cooling down";
      Hold until (convert(A_IRV) < ir0a) or 3:00;
      > Lamp A off
      > Lamp A RF Setpoint 0
      "Lamp A is Off";
}

State A_DEAD {
     +1 > Lamp A IR Setpoint 0
     +1 > Lamp A RF Setpoint 0
     +1 > Lamp A Off
    "Lamp A is Dead"; 
}

#############################################################################
# Partition 4: Lamp A Watch
#############################################################################

PARTITION

State A_WATCH_WAIT {
  Depending on (A_ON) { Validate A_WATCH; }
}

State A_WATCH {
  Depending on (A_OFF) { Validate A_WATCH_WAIT; }
  Depending on (SHUTDOWN) { Validate A_WATCH_WAIT; }
    { warn_a = 7; }
  +3:00
    { if ((warn_a&1) && convert(ARFFW) < 1.0) {
        msg(1, "Lamp A forward power is low"); 
        warn_a &= ~1;
      }
      if ((warn_a&2) && convert(ARFBW) > 4.0) {
        msg(1, "Lamp A reflected power is high");
        warn_a &= ~2;
      }
      if ((warn_a&4) && convert(A_IRV) < 0.4) {
        msg(1, "Lamp A IR is low");
        warn_a &= ~4;
      }
    }
}
  
  

#############################################################################
#############################################################################
# Partition 5: Lamp B Control
#############################################################################
#############################################################################

PARTITION

%{	
  int fail_cnt_b = 0, warn_b = 0;
%}

State B_WAIT {
   +1 > Lamp B off

  depending on (BELOW_CLOUDS) { Validate B_START; }
  depending on (ABOVE_CLOUDS) { Validate B_START; }
  depending on (SHUTDOWN) { Validate B_DEAD; }
}

State B_START {
    depending on (DESCENT) { Validate B_OFF; }
    depending on (SHUTDOWN) { Validate B_DEAD; }

     +1 > Lamp B IR Setpoint 0
     +1 > Lamp B off
  +1:00 { if (++fail_cnt_b>6) {
            msg(2, "Lamp B Failed 6 times" );
            Validate B_DEAD;
          }
        }
     +1 > Lamp B RF Setpoint 3000
    +10 > Lamp B on
    +10 Hold until (convert(B_IRV) >= ir0b)
          or 20 else Validate B_START;
     +1 { fail_cnt_b = 0; }
     +1 > Lamp B IR Setpoint 200
        Validate B_ON;
}

State B_ON {
    { if (!Lmp_B) Validate B_TRIPPED; }
    depending on (DESCENT) { Validate B_OFF; }
    depending on (SHUTDOWN) { Validate B_DEAD; }
    
    Hold until (convert(B_IRV) < ir0b);
    Hold until (convert(B_IRV) >= ir0b) OR 20
    else Validate B_START;
    Validate B_ON;
}

State B_TRIPPED {
 +10 > Lamp B On
  +1 Validate B_ON;
}

State B_OFF {
    depending on (ASCENT)
      { if ( ! (SW_stop & B_STOPPED) ) Validate B_START; }
    depending on (SHUTDOWN) { Validate B_DEAD; }

      "Holding for cycle start";
      Hold until ((HSolS % 10) == 0) or 35;
   +1 > SW Status Set 1 to 0
      > Lamp B IR Setpoint 0
      "Lamp B Heater Off, cooling down";
      Hold until (convert(B_IRV) < ir0b) or 3:00;
      > Lamp B off
      > Lamp B RF Setpoint 0
      "Lamp B is Off";
}

State B_DEAD {
     +1 > Lamp B IR Setpoint 0
     +1 > Lamp B RF Setpoint 0
     +1 > Lamp B Off
    "Lamp B is Dead"; 
}

#############################################################################
# Partition 6: Lamp B Watch
#############################################################################

PARTITION

State B_WATCH_WAIT {
  Depending on (B_ON) { Validate B_WATCH; }
}

State B_WATCH {
  Depending on (B_OFF) { Validate B_WATCH_WAIT; }
  Depending on (SHUTDOWN) { Validate B_WATCH_WAIT; }
    { warn_b = 7; }
  +3:00
    { if ((warn_b&1) && convert(BRFFW) < 1.0) {
        msg(1, "Lamp B forward power is low"); 
        warn_b &= ~1;
      }
      if ((warn_b&2) && convert(BRFBW) > 4.0) {
        msg(1, "Lamp B reflected power is high");
        warn_b &= ~2;
      }
      if ((warn_b&4) && convert(B_IRV) < 0.4) {
        msg(1, "Lamp B IR is low");
        warn_b &= ~4;
      }
    }
}

#############################################################################
#############################################################################
# Partition 7: Lamp C Control
#############################################################################
#############################################################################

PARTITION

%{	
  int fail_cnt_c = 0, warn_c = 0;
%}

State C_WAIT {
   +1 > Lamp C off

  depending on (BELOW_CLOUDS) { Validate C_START; }
  depending on (ABOVE_CLOUDS) { Validate C_START; }
  depending on (SHUTDOWN) { Validate C_DEAD; }
}

State C_START {
    depending on (DESCENT) { Validate C_OFF; }
    depending on (SHUTDOWN) { Validate C_DEAD; }

         +1 > Lamp C IR Setpoint 0
         +1 > Lamp C off
  +1:00 { if (++fail_cnt_c>6) {
            msg(2, "Lamp C Failed 6 times" );
            Validate C_DEAD;
          }
        }
     +1 > Lamp C RF Setpoint 3000
    +15 > Lamp C on
    +10 Hold until (convert(C_IRV) > ir0c)
          or 20 else Validate C_START;
     +1 { fail_cnt_c = 0; }
     +1 > Lamp C IR Setpoint 240
        Validate C_ON;
}

State C_ON {
    { if (!Lmp_C) Validate C_TRIPPED; }
    depending on (DESCENT) { Validate C_OFF; }
    depending on (SHUTDOWN) { Validate C_DEAD; }
    
    Hold until (convert(C_IRV) < ir0c);
    Hold until (convert(C_IRV) >= ir0c) OR 20
    else Validate C_START;
    Validate C_ON;
}

State C_TRIPPED {
 +10 > Lamp C On
  +1 Validate C_ON;
}

State C_OFF {
    depending on (ASCENT)
      { if ( ! (SW_stop & C_STOPPED) ) Validate C_START; }
    depending on (SHUTDOWN) { Validate C_DEAD; }

      "Holding for cycle start";
      hold until ((HSolS % 10) == 0) or 35;
   +1 > SW Status Set 1 to 0
      > Lamp C IR Setpoint 0
      "Lamp C Heater Off, cooling down";
      Hold until (convert(C_IRV) < ir0c) or 3:00;
      > Lamp C off
      > Lamp C RF Setpoint 0
      "Lamp C is Off";
}

State C_DEAD {
   +1 > Lamp C IR Setpoint 0
   +1 > Lamp C RF Setpoint 0
   +1 > Lamp C Off
      "Lamp C is Dead"; 
}

#############################################################################
# Partition 8: Lamp C Watch
#############################################################################

PARTITION

State C_WATCH_WAIT {
  Depending on (C_ON) { Validate C_WATCH; }
}

State C_WATCH {
  Depending on (C_OFF) { Validate C_WATCH_WAIT; }
  Depending on (SHUTDOWN) { Validate C_WATCH_WAIT; }
    { warn_c = 7; }
  +3:00
    { if ((warn_c&1) && convert(CRFFW) < 1.0) {
        msg(1, "Lamp C forward power is low"); 
        warn_c &= ~1;
      }
      if ((warn_c&2) && convert(CRFBW) > 4.0) {
        msg(1, "Lamp C reflected power is high");
        warn_c &= ~2;
      }
      if ((warn_c&4) && convert(C_IRV) < 0.4) {
        msg(1, "Lamp C IR is low");
        warn_c &= ~4;
      }
    }
}

#############################################################################
#############################################################################
# Partition 9: Lamp D Control
#############################################################################
#############################################################################

PARTITION

%{	
  int fail_cnt_d = 0, warn_d = 0;
%}

State D_WAIT {
   +1 > Lamp D off

  depending on (BELOW_CLOUDS) { Validate D_START; }
  depending on (ABOVE_CLOUDS) { Validate D_START; }
  depending on (SHUTDOWN) { Validate D_DEAD; }
}

State D_START {
    depending on (DESCENT) { Validate D_OFF; }
    depending on (SHUTDOWN) { Validate D_DEAD; }

     +1 > Lamp D IR Setpoint 0
     +1 > Lamp D off
 +1:00  { if (++fail_cnt_d>6) {
            msg(2, "Lamp D Failed 6 times" );
            Validate D_DEAD;
           }
        }
     +1 > Lamp D RF Setpoint 3000
    +20 > Lamp D on
    +10 hold until (convert(D_IRV) > ir0d)
          or 20 else Validate D_START;
     +1 { fail_cnt_d = 0; }
     +1 > Lamp D IR Setpoint 260
        Validate D_ON;
}

State D_ON {
    { if (!Lmp_D) Validate D_TRIPPED; }
    depending on (DESCENT) { Validate D_OFF; }
    depending on (SHUTDOWN) { Validate D_DEAD; }
    
    Hold until (convert(D_IRV) < ir0d);
    Hold until (convert(D_IRV) >= ir0d) OR 20
    else Validate D_START;
    Validate D_ON;
}

State D_TRIPPED {
 +10 > Lamp D On
  +1 Validate D_ON;
}

State D_OFF {
    depending on (ASCENT)
      { if ( ! (SW_stop & D_STOPPED) ) Validate D_START; }
    depending on (SHUTDOWN) { Validate D_DEAD; }

      "Holding for cycle start";
      hold until ((HSolS % 10) == 0) or 35;
   +1 > SW Status Set 1 to 0
      > Lamp D IR Setpoint 0
      "Lamp D Heater Off, cooling down";
      Hold until (convert(D_IRV) < ir0d) or 3:00;
      > Lamp D off
      > Lamp D RF Setpoint 0
      "Lamp D is Off";
}

State D_DEAD {
   +1 > Lamp D IR Setpoint 0
   +1 > Lamp D RF Setpoint 0
   +1 > Lamp D Off
     "Lamp D is Dead"; 
}

#############################################################################
# Partition 10: Lamp D Watch
#############################################################################

PARTITION

State D_WATCH_WAIT {
  Depending on (D_ON) { Validate D_WATCH; }
}

State D_WATCH {
  Depending on (D_OFF) { Validate D_WATCH_WAIT; }
  Depending on (SHUTDOWN) { Validate D_WATCH_WAIT; }
    { warn_d = 7; }
  +3:00
    { if ((warn_d&1) && convert(DRFFW) < 1.0) {
        msg(1, "Lamp D forward power is low"); 
        warn_d &= ~1;
      }
      if ((warn_d&2) && convert(DRFBW) > 4.0) {
        msg(1, "Lamp D reflected power is high");
        warn_d &= ~2;
      }
      if ((warn_d&4) && convert(D_IRV) < 0.4) {
        msg(1, "Lamp D IR is low");
        warn_d &= ~4;
      }
    }
}
