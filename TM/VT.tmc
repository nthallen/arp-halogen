/* VT.tmc performs calculations relating to Velocity and 
  Temperature in SD, PD
*/
%{
/* filter temps
  Look at all 7 thermistors SF1B<n>. Eliminate any shorts or 
  opens. Shorts are pretty easy, but opens are ambiguous, since 
  we might actually see temps around -50C in the flow. So we will 
  only through out opens if we see a max temp greater than -30C.
  Then throw out min and max if we have enough good therms left.
  Note that comparisons on the raw data have the opposite sense, 
  since the conversion always has a negative slope. i.e. if 
  SF1B0 < SF1B1, then convert(SF1B0) > convert(SF1B1).
  For the present case, a short is defined as any reading below 
  100, open as any reading above 65520 and the "warm enough" temp 
  is anything below 65472. These values could be made parameters 
  to this routine if required.
*/
  static void filter_temps( AD12 *RawT ) {
	int i, maxi = -1, mini = -1, npts = 0;

	/* Elminate shorts */
	for (i=0;i<7;i++) {
	  if ( RawT[i] < 100 ) RawT[i] = 0;
	}
	/* Find max value's index */
	for (i=0;i<7;i++) {
	  if ( RawT[i] > 0 && ( maxi < 0 || RawT[i] < RawT[maxi] ) )
		maxi = i;
	}
	if ( maxi > 0 ) {
	  if ( RawT[maxi] <= 65472 ) { /* MaxTemp >= -29.58 */
		/* Throw out opens */
		for (i=0;i<7;i++) {
		  if ( RawT[i] >= 65520 ) RawT[i] = 0;
		}
	  }
	}
	/* Find min value's index */
	for (i=0;i<7;i++) {
	  if ( RawT[i] > 0 ) {
		npts++;
		if ( mini < 0 || RawT[i] > RawT[mini] ) mini = i;
	  }
	}
	if ( npts > 2 ) {
	  RawT[mini] = 0;
	  if (npts > 3 ) RawT[maxi] = 0;
	}
  }
%}

CELCIUS_I SF1BTemp; invalidate SF1BTemp;
{ AD12_T10M Ts[7];
  CELCIUS TsC[7];
  int i, npts;
  CELCIUS Td;

  /* If a thermistor is known to be bad, replace it's reference
     here with a 0: e.g.
       Ts[1] = 0;
  */
  Ts[0] = SF1B0; Ts[1] = SF1B1; Ts[2] = SF1B2;
  Ts[3] = SF1B3; Ts[4] = SF1B4; Ts[5] = SF1B5;
  Ts[6] = SF1B6;

  /* Leave this stuff alone */
  TsC[0] = convert(SF1B0); TsC[1] = convert(SF1B1); TsC[2] = convert(SF1B2);
  TsC[3] = convert(SF1B3); TsC[4] = convert(SF1B4); TsC[5] = convert(SF1B5);
  TsC[6] = convert(SF1B6);
  filter_temps( Ts );
  Td = 0.; npts = 0;
  for (i=0;i<7;i++) {
	if ( Ts[i] > 0 ) {
	  npts++;
	  Td += TsC[i];
	}
  }
  if ( npts > 0 ) Td /= npts;
  else Td = 1000.;
  SF1BTemp = floor( Td * 10 + .5 );
  Validate SF1BTemp;
}

CELCIUS_I SF2BTemp; invalidate SF2BTemp;
{ AD12_T10M Ts[7];
  CELCIUS TsC[7];
  int i, npts;
  CELCIUS Td;

  /* If a thermistor is known to be bad, replace it's reference
     here with a 0: e.g.
       Ts[1] = 0;
  */
  Ts[0] = SF2B0; Ts[1] = SF2B1; Ts[2] = SF2B2;
  Ts[3] = SF2B3; Ts[4] = SF2B4; Ts[5] = SF2B5;
  Ts[6] = SF2B6;

  /* Leave this stuff alone */
  TsC[0] = convert(SF2B0); TsC[1] = convert(SF2B1); TsC[2] = convert(SF2B2);
  TsC[3] = convert(SF2B3); TsC[4] = convert(SF2B4); TsC[5] = convert(SF2B5);
  TsC[6] = convert(SF2B6);
  filter_temps( Ts );
  Td = 0.; npts = 0;
  for (i=0;i<7;i++) {
	if ( Ts[i] > 0 ) {
	  npts++;
	  Td += TsC[i];
	}
  }
  if ( npts > 0 ) Td /= npts;
  else Td = 1000.;
  SF2BTemp = floor( Td * 10 + .5 );
  Validate SF2BTemp;
}

%{
  #include <math.h>
  static VELOCITY_I
  calc_velocity( TORR P, TORR DP, CELCIUS_I TI ) {
	VELOCITY Vel;
	VELOCITY_I Vi;
	CELCIUS T = TI*.1;
	
	Vel = (2 * 8.314e7 / 28.96 ) * DP * ( T + 273.15 ) / P;
	if ( Vel >= 0 ) Vel = sqrt( Vel );
	else Vel = -sqrt( -Vel );
	Vi = (VELOCITY_I) floor( Vel + .5 );
	return Vi;
  }
%}

VELOCITY_I SD1Vel; invalidate SD1Vel;
{ SD1Vel = calc_velocity( convert(SD1_P), convert(SD1DP), SF1BTemp );
  Validate SD1Vel;
}

VELOCITY_I SD2Vel; invalidate SD2Vel;
{ SD2Vel = calc_velocity( convert(SD2_P), convert(SD2DP), SF2BTemp );
  Validate SD2Vel;
}
